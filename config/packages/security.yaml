security:
    password_hashers:
        # Our user class and the algorithm we'll use to encode passwords
        # 'auto' means to let Symfony choose the best possible password hasher (Argon2 or Bcrypt)
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        legacy_md5:
            algorithm: md5
            encode_as_base64: false
            iterations: 1

        legacy_sha1:
            algorithm: sha1
            encode_as_base64: false
            iterations: 1

        legacy_bcrypt:
            algorithm: bcrypt
            encode_as_base64: false
            cost: 4

        App\CoreBundle\Entity\User\User:
            algorithm: auto
            migrate_from:
                - bcrypt
                - legacy_sha1
                - legacy_bcrypt
    providers:
        # https://symfony.com/doc/current/security/user_provider.html
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
        app_user_provider:
            entity:
                class: App\CoreBundle\Entity\User\User
                property: username
    role_hierarchy:
        ROLE_USER: [ ROLE_USER ]
        ROLE_STUDENT: [ ROLE_USER ]
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_STUDENT
            - ROLE_TEACHER
            - ROLE_QUESTION_MANAGER
            - ROLE_SESSION_MANAGER
            - ROLE_CURRENT_COURSE_TEACHER
            - ROLE_CURRENT_COURSE_SESSION_TEACHER
            - ROLE_CURRENT_COURSE_GROUP_TEACHER
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ] # Admin that can log in as another user.
        ROLE_GLOBAL_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ] # The user that installed the platform.
        ROLE_TEACHER: [ ROLE_STUDENT ]
        ROLE_HR: [ ROLE_TEACHER, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_QUESTION_MANAGER: [ ROLE_STUDENT ]
        ROLE_SESSION_MANAGER: [ ROLE_STUDENT, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_STUDENT_BOSS: [ ROLE_STUDENT ]
        ROLE_INVITEE: [ ROLE_STUDENT ]

        ROLE_CURRENT_COURSE_STUDENT: [ ROLE_CURRENT_COURSE_STUDENT ] # Set in the CidReqListener
        ROLE_CURRENT_COURSE_TEACHER: [ ROLE_CURRENT_COURSE_TEACHER, ROLE_CURRENT_COURSE_STUDENT ] # Set in the course listener
        ROLE_CURRENT_COURSE_GROUP_STUDENT: [ ROLE_CURRENT_COURSE_GROUP_STUDENT ] # Set in the CidReqListener
        ROLE_CURRENT_COURSE_GROUP_TEACHER: [ ROLE_CURRENT_COURSE_GROUP_TEACHER, ROLE_CURRENT_COURSE_GROUP_STUDENT ]
        ROLE_CURRENT_COURSE_SESSION_STUDENT: [ ROLE_CURRENT_COURSE_SESSION_STUDENT ]
        ROLE_CURRENT_COURSE_SESSION_TEACHER: [ ROLE_CURRENT_COURSE_SESSION_STUDENT, ROLE_CURRENT_COURSE_SESSION_TEACHER ]
        ROLE_ANONYMOUS: [ ROLE_ANONYMOUS ]
    access_decision_manager:
        # strategy can be: affirmative, unanimous or consensus
        # only grant access if none of the voters has denied access
        strategy: unanimous
    # https://symfony.com/doc/current/security.html#a-authentication-firewalls
    firewalls:
        api:
            pattern: ^/api
            #            stateless: true
            jwt: ~
            context: main
            provider: app_user_provider
            json_login:
                check_path: authentication_token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure


        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/
            context: main
            provider: app_user_provider
            #            login_throttling:
            #                max_attempts: 5
            #            form_login:
            #                csrf_token_generator: security.csrf.token_manager
            #                login_path: /login
            #                use_forward: false
            #                check_path: /login
            #                failure_path: null
            #            guard:
            #                authenticators:
            #                    - Chamilo\CoreBundle\Security\LoginFormAuthenticator
            #                    - Chamilo\CoreBundle\Security\TokenAuthenticator
            entry_point: App\CoreBundle\Security\AuthenticationEntryPoint
            remember_me:
                secret: '%secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            logout:
                path: /logout
                target: /
            switch_user: true
            json_login:
                check_path: /login_json
                # username_path: security.credentials.login
                # password_path: security.credentials.password

            custom_authenticators:
                - App\CoreBundle\Security\Authenticator\OAuth2\GenericAuthenticator
                - App\CoreBundle\Security\Authenticator\OAuth2\FacebookAuthenticator
                - App\CoreBundle\Security\Authenticator\OAuth2\KeycloakAuthenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: '^/{_locale}/admin', roles: ROLE_ADMIN }
        - { path: '^/{_locale}/calendar/', roles: PUBLIC_ACCESS } # Allows to see the calendar list and detail pages (standard)
        - { path: '^/{_locale}/c/', roles: PUBLIC_ACCESS } # Allows to see the calendar list pages (short)
        - { path: '^/{_locale}/d/', roles: PUBLIC_ACCESS } # Allows to see the calendar detail pages (short)
        - { path: '^/{_locale}/impress', roles: PUBLIC_ACCESS } # Allow impress page
        - { path: '^/{_locale}/admin/login$', roles: PUBLIC_ACCESS } # Allows /admin/login into backend
        - { path: '^/admin', roles: IS_AUTHENTICATED_FULLY } # Easy admin backend
        - { path: '^/api/v1/docs', roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: '^/api/v1/token/refresh', roles: PUBLIC_ACCESS } # Allows getting new tokens
        - { path: '^/api/v1/token/get', roles: PUBLIC_ACCESS } # Allows getting token with login
        - { path: '^/api/v1/version', roles: PUBLIC_ACCESS } # Allows getting the version
        - { path: '^/api/v1/contexts', roles: PUBLIC_ACCESS } # Allows getting the version
        - { path: '^/api/v1/', roles: '%env(resolve:JWT_ROLE)%' } # Protect all others pages
        - { path: '^/api/v1', roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/authentication_token, roles: PUBLIC_ACCESS }
    # The ROLE_ADMIN role inherits from the ROLE_USER role

when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

        firewalls:
            main:
                http_basic: ~
